openapi: 3.0.0
info:
  description: |
    'This API will return, update, or delete Marko User data'
    
    The base endpoint URL for this API in production is: `https://marko.aramark.net/v1/marko`.
    
    For testing the API with the "Try" tool on this page or in your app, use either our testing server "qa-marko" or our development server "dev-marko".
  version: "1.0.0-oas3"
  title: Marko
tags:
  - name: User
    description: 'Gets, Updates or Creates Marko User information'
  - name: Profile
    description: 'Gets, Updates, Creates or Removes Marko Profile information'
  - name: Device
    description: 'Gets, Updates, Creates or Removes Marko Profile Device information'
  - name: Set
    description: 'Gets, Updates, Creates or Removes Marko Profile Set information'
  - name: Anet
    description: Gets the current list of ANET Users
paths:
  /users:
    get:
      summary: Get all Users
      description: Returns All Marko Users
      operationId: getAllMarkoUsers
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/userIdParamFalse'
        - $ref: '#/components/parameters/bypassCacheParam'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'ENUM ''Success'', ''Error'' or ''Not Found'''
                    default: Success
                    example: Success
                  count:
                    type: string
                    description: Number of records returned
                    default: '0'
                    example: '1'
                  user_details:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
    post:
      summary: Create User
      tags:
        - User
      description: Creates Marko User
      operationId: postUser
      parameters:
        - $ref: '#/components/parameters/userIdParamTrue'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: Details of the User
          content:
            '*/*':
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'ENUM ''Success'', ''Error'' or ''Not Found'''
                    default: Success
                    example: Success
                  count:
                    type: string
                    description: Number of records returned
                    default: '0'
                    example: '1'
                  user_details:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
  /user/profile:
    get:
      summary: Get User Profiles
      description: Returns Marko User Profiles
      operationId: getUserProfiles
      tags:
        - Profile
      parameters:
        - $ref: '#/components/parameters/profileIdParamFalse'
        - $ref: '#/components/parameters/bypassCacheParam'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: Provides a list of Profiles
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'ENUM ''Success'', ''Error'' or ''Not Found'''
                    default: Success
                    example: Success
                  count:
                    type: string
                    description: Number of records returned
                    default: '0'
                    example: '1'
                  profile_details:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
    post:
      summary: Create User Profile
      tags:
        - Profile
      description: Creates Marko User Profile
      operationId: postUserProfile
      parameters:
        - $ref: '#/components/parameters/profileIdParamFalse'
        - $ref: '#/components/parameters/bypassCacheParam'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: User Profile
          content:
            '*/*':
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'ENUM ''Success'', ''Error'' or ''Not Found'''
                    default: Success
                    example: Success
                  count:
                    type: string
                    description: Number of records returned
                    default: '0'
                    example: '1'
                  profile_details:
                    type: array
                    items:
                      $ref: '#/components/schemas/Profile'
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
    delete:
      summary: Remove Profile
      tags:
        - Profile
      operationId: deleteUserProfile
      parameters:
        - $ref: '#/components/parameters/profileIdParamTrue'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
  /user/device:
    get:
      summary: Get User Devices
      description: Returns Marko User Devices
      operationId: getUserDevices
      tags:
        - Device
      parameters:
        - $ref: '#/components/parameters/deviceIdParamFalse'
        - $ref: '#/components/parameters/userIdParamFalse'
        - $ref: '#/components/parameters/bypassCacheParam'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: Provides a list of User Devices
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'ENUM ''Success'', ''Error'' or ''Not Found'''
                    default: Success
                    example: Success
                  count:
                    type: string
                    description: Number of records returned
                    default: '0'
                    example: '1'
                  device_details:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
    post:
      summary: Create User Device
      tags:
        - Device
      description: Creates Marko User Device
      operationId: postUserDevice
      parameters:
        - $ref: '#/components/parameters/deviceIdParamTrue'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: Creates a User Device
          content:
            '*/*':
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'ENUM ''Success'', ''Error'' or ''Not Found'''
                    default: Success
                    example: Success
                  count:
                    type: string
                    description: Number of records returned
                    default: '0'
                    example: '1'
                  device_details:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
    delete:
      summary: Remove User Device
      tags:
        - Device
      operationId: deleteUserDevice
      parameters:
        - $ref: '#/components/parameters/deviceIdParamTrue'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
  /user/set:
    get:
      summary: Get User Set
      description: Returns Marko User Profile Set
      operationId: getUserProfileSet
      tags:
        - Set
      parameters:
        - $ref: '#/components/parameters/setIdParamFalse'
        - $ref: '#/components/parameters/userIdParamFalse'
        - $ref: '#/components/parameters/bypassCacheParam'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'ENUM ''Success'', ''Error'' or ''Not Found'''
                    default: Success
                    example: Success
                  count:
                    type: string
                    description: Number of records returned
                    default: '0'
                    example: '1'
                  set_details:
                    type: array
                    items:
                      $ref: '#/components/schemas/Set'
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
    post:
      summary: Create User Set
      tags:
        - Set
      description: Creates Marko User Profile
      operationId: postUserProfileSet
      parameters:
        - $ref: '#/components/parameters/setIdParamTrue'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'ENUM ''Success'', ''Error'' or ''Not Found'''
                    default: Success
                    example: Success
                  count:
                    type: string
                    description: Number of records returned
                    default: '0'
                    example: '1'
                  set_details:
                    type: array
                    items:
                      $ref: '#/components/schemas/Set'
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
    delete:
      summary: Remove User Set
      tags:
        - Set
      operationId: deleteUserProfileSet
      parameters:
        - $ref: '#/components/parameters/setIdParamTrue'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
  /user/set/value:
    post:
      summary: Create User Set Value
      tags:
        - Set
      description: Creates Marko User Set Value
      operationId: postUserProfileSetValue
      parameters:
        - $ref: '#/components/parameters/setIdParamTrue'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: Create a new Set Value
          content:
            '*/*':
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'ENUM ''Success'', ''Error'' or ''Not Found'''
                    default: Success
                    example: Success
                  count:
                    type: string
                    description: Number of records returned
                    default: '0'
                    example: '1'
                  set_values:
                    type: array
                    items:
                      $ref: '#/components/schemas/Set'
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
    delete:
      summary: Remove User Set Value
      tags:
        - Set
      operationId: deleteUserProfileSet Value
      parameters:
        - $ref: '#/components/parameters/setIdParamTrue'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
  /anet/users:
    get:
      summary: Get Anet Users
      description: Returns list of ANET Users
      operationId: getAnetUsers
      tags:
        - Anet
      parameters:
        - name: employee_id
          in: query
          description: unique ID of the employee
          schema:
            type: string
        - name: email
          in: query
          description: email address of the employee
          schema:
            type: string
        - name: size
          in: query
          description: number of records returned in one call
          schema:
            type: number
            default: 50
        - name: page
          in: query
          description: page number of the result set to return
          schema:
            type: number
            default: 1
        - $ref: '#/components/parameters/bypassCacheParam'
        - $ref: '#/components/parameters/smokeParam'
      responses:
        '200':
          description: Provides a list of ANET Users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'ENUM ''Success'', ''Error'' or ''Not Found'''
                    default: Success
                    example: Success
                  count:
                    type: string
                    description: Number of records returned
                    default: '0'
                    example: '1'
                  device_details:
                    type: array
                    items:
                      $ref: '#/components/schemas/Anet_User'
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
servers:
  - url: 'https://dev-marko.aramark.net/v1/marko'
components:
  parameters:
    bypassCacheParam:
      in: header
      name: bypass-cache
      description: This HTTP Header variable will bypass cache
      schema:
        type: string
        enum:
          - 'true'
          - 'false'
        default: 'false'
    smokeParam:
      in: header
      name: smoke
      description: >-
        When set to 'true' this HTTP Header variable will route to the
        Integration environment.  Only applicable in QA Server
      schema:
        type: string
        enum:
          - 'true'
          - 'false'
        default: 'false'
    userIdParamFalse:
      name: user_id
      in: query
      description: >-
        Unique identifier of a Marko User.  Used for returning specific user,
        otherwise returns all users
      required: false
      schema:
        type: string
    userIdParamTrue:
      name: user_id
      in: query
      description: >-
        Unique identifier of a Marko User.  Used for returning specific user,
        otherwise returns all users
      required: true
      schema:
        type: string
    profileIdParamFalse:
      in: query
      name: profile_id
      description: Unique identifier of a user Profile
      required: false
      schema:
        type: string
    profileIdParamTrue:
      in: query
      name: profile_id
      description: Unique identifier of a user Profile
      required: true
      schema:
        type: string
    deviceIdParamFalse:
      in: query
      name: device_id
      description: >-
        Unique identifier of a user Device. Used for returning specific device,
        otherwise returns all devices
      required: false
      schema:
        type: string
    deviceIdParamTrue:
      in: query
      name: device_id
      description: >-
        Unique identifier of a user Device. Used for returning specific device,
        otherwise returns all devices
      required: true
      schema:
        type: string
    setIdParamFalse:
      in: query
      name: set_id
      description: >-
        Unique identifier of a user Set. Used for returning specific set,
        otherwise returns all set
      required: false
      schema:
        type: string
    setIdParamTrue:
      in: query
      name: set_id
      description: >-
        Unique identifier of a user Set. Used for returning specific set,
        otherwise returns all set
      required: true
      schema:
        type: string
  securitySchemes:
    apikey:
      type: apiKey
      in: header
      name: apikey
      description: This HTTP Header variable will verify security
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
          description: Unique identifier of a user
        first_name:
          type: string
          description: user first name
        last_name:
          type: string
          description: user last name
        name:
          type: string
          description: user name
        email:
          type: string
          description: email address of a user
        cell_number:
          type: string
          description: cell phone number of a user
        valid:
          type: string
          description: boolean determining validity of device
        create_date:
          type: string
          description: date that profile was created
        update_date:
          type: string
          description: date that profile was last updated
    Profile:
      type: object
      properties:
        profile_id:
          type: string
          description: Unique identifier of a profile
        profile_name:
          type: string
          description: name of a profile
        profile_type:
          type: string
          description: type of profile
        user_id:
          type: string
          description: Unique identifier of a user associated with profile
        valid:
          type: string
          description: boolean determining validity of profile
        create_date:
          type: string
          description: date that profile was created
        update_date:
          type: string
          description: date that profile was last updated
    Device:
      type: object
      properties:
        device_id:
          type: string
          description: Unique identifier of a device
        device_number:
          type: string
          description: number for a device
        phone_number:
          type: string
          description: phone number associated with a device
        profile_id:
          type: string
          description: Unique identifier of a profile
        valid:
          type: string
          description: boolean determining validity of device
        create_date:
          type: string
          description: date that profile was created
        update_date:
          type: string
          description: date that profile was last updated
    Set:
      type: object
      properties:
        set_id:
          type: string
          description: Unique identifier of a set
        set_name:
          type: string
          description: name of a set
        profile_id:
          type: string
          description: Unique identifier of a profile
        status:
          type: string
          description: ENUM describing what action needs to be taken on set
        create_date:
          type: string
          description: date that profile was created
        update_date:
          type: string
          description: date that profile was last updated
    Anet_User:
      type: object
      properties:
        guid:
          type: string
          description: global user identifier for a user
        upn:
          type: string
          description: universal person name for a user
        email:
          type: string
          description: email address of a user
        first_name:
          type: string
          description: first name of a user
        last_name:
          type: string
          description: last name of a user
        display_name:
          type: string
          description: display name for a user
        employee_id:
          type: string
          description: unique ID of the employee